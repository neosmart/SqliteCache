<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard2.0;netcoreapp3.1;net5.0;net6.0;net8.0</TargetFrameworks>
    <LangVersion>9.0</LangVersion>
    <AssemblyName>NeoSmart.Caching.Sqlite</AssemblyName>
    <RootNamespace>NeoSmart.Caching.Sqlite</RootNamespace>
    <Version>8.0.1</Version>
    <Nullable>enable</Nullable>
    <Authors>Mahmoud Al-Qudsi, neosmart, mqudsi</Authors>
    <Company>NeoSmart Technologies</Company>
    <Product>SqliteCache</Product>
    <Description>An SQLite-backed IDistributedCache cache implementation for ASP.NET Core. Fast, transparent, persistent caching.</Description>
    <Copyright>NeoSmart Technologies 2019-2025</Copyright>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageProjectUrl>https://neosmart.net/blog/2019/sqlite-cache-for-asp-net-core</PackageProjectUrl>
    <RepositoryUrl>https://github.com/neosmart/AspSqliteCache</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageTags>idistributedcache, cache, sqlite, sqlitecache, distributed, aspnetcore, performance</PackageTags>
    <SignAssembly>true</SignAssembly>
    <AssemblyOriginatorKeyFile>NeoSmart.Caching.Sqlite.snk</AssemblyOriginatorKeyFile>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <SuppressTfmSupportBuildWarnings>true</SuppressTfmSupportBuildWarnings>
  </PropertyGroup>

  <PropertyGroup>
    <PackageReleaseNotes>
Version 7.0:
- SqliteCache no longer depends on SQLitePCLRaw.bundle_green.

  ASP.NET users should install companion package NeoSmart.Caching.Sqlite.AspNetCore.
  Other .NET Core users will need to install either SQLitePCLRaw.bundle_green and call
  `SQLitePCL.Batteries.Init()` before instantiating SqliteCache, or else install the
  correct SQLitePCLRaw.provider.xxx version that matches the target platform and call
  `SQLitePCL.raw.SetProvider(new SQLitePCL.SQLite3Provider_whatever())` before using
  SqliteCache.

Version 6.1:
- Add methods to clear the cache (SqliteCache.Clear() and SqliteCache.ClearAsync())
- SQLitePCLRaw upgraded to 2.1.4
- Compatible w/ SQLite builds compiled with SQLITE_DSQ=0

Version 6.0:
- Updates all Entity Framework and Microsoft Extension dependencies to v6.x

Version 5.0:
- WAL mode and normal synchronization pragmas are set at startup, dramatically improving performance
- ILogger constructor parameter is now optional
- A separate SqliteConnection is used for each SqlCommand instance, fixing threading issues under UWP
- Makes it possible to inject SqliteCache directly (rather than only as IDistributedCache)
- Adds IAsyncDisposable implementation for .NET Core 3.1 and above
- Adds a bulk insert option to insert many key-value pairs quickly (credit to first-time contributor Elias Baumgartner aka @Rap22tor)
- Fixes an issue w/ incorrect handling of user-specified non-UTC expiration dates (credit to first-time contributor Ravindu Liyanapathirana, aka @ravindUwU)

Version 3.1:
- Added .netcoreapp3.1 target
- Switched to SQLitePCLRaw.bundle_e_sqlite3 (same as .NET Core 3.1 web projects)
- SqliteCache is now a sealed class to prevent dispose problems if derived
- Version number aligns with .NET Core semantic versioning
	</PackageReleaseNotes>
  </PropertyGroup>

  <ItemGroup>
    <None Include="..\README.md">
      <Pack>True</Pack>
      <PackagePath>\</PackagePath>
    </None>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Data.Sqlite.Core" Version="8.0.13" />
    <PackageReference Include="Microsoft.Extensions.Caching.Abstractions" Version="8.0.0" />
    <PackageReference Include="Microsoft.Extensions.Logging.Abstractions" Version="8.0.3" />
    <PackageReference Include="Microsoft.Extensions.Options" Version="8.0.2" />
    <PackageReference Include="SQLitePCLRaw.core" Version="2.1.10" />
  </ItemGroup>

  <ItemGroup>
    <Compile Update="Resources.Designer.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Update="Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
  </ItemGroup>

</Project>
